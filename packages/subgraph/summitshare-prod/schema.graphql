

type Transfer @entity(immutable: true) {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  exhibit: Exhibit!
}

type PaymentDistributed @entity {
  id: ID!
  escrow: Escrow!
  beneficiary: Beneficiary!
  amount: BigInt!
  indexedcaller: Bytes! #Added field for new parameter 
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExhibitCurated @entity {
  id: ID!
  exhibit: Exhibit!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Ticket @entity {
  id: ID! # tokenId
  exhibit: Exhibit!
  buyer: Bytes! # address of buyer
  transactionHash: Bytes!
  uri: String
  ticketDetails:[TicketMinted!] @derivedFrom(field:"ticket")
}

type Exhibit @entity {
  id: ID! # Unique identifier, possibly the exhibit address or a 
  eventId: String! # specific exhibit ID on the Service contract
  museumId: String # specific exhibit ID on the Museum contract
  escrow: Escrow! # Link to the escrow entity
  museum: Museum! # Link to the museum entity
  tickets: [Ticket!] @derivedFrom(field: "exhibit")
  mints: [TicketMinted!] @derivedFrom(field: "exhibit")
  curatedEvents: [ExhibitCurated!] @derivedFrom(field: "exhibit")
  totalMinted: BigInt!
  transfers: [Transfer!] @derivedFrom(field:"exhibit")
  exhibitDetails: [ExhibitCreated!] @derivedFrom(field:"exhibit")
}

type Collection @entity {
  id: ID! # ArtifactNFT contract address
  artifacts: [Artifact!]! @derivedFrom(field: "collection")
  name: String! # Name of the artifact
  symbol: String! # Symbol associated with the artifact
  baseURI: String! # Base URI for metadata
  totalMinted: BigInt!
  exhibitsDetails: [ExhibitCreated!]@derivedFrom(field: "collection")
}

type Artifact @entity {
  id: ID! # Unique identifier, possibly the artifact address or a specific artifact ID
  tokenURI: String! # Base URI for metadata
  owner: Bytes! # Address of the owner
  collection: Collection # The collection (ArtifactNFT contract) this artifact belongs to
}

type Escrow @entity {
  id: ID! # escrowAddress
  usdtToken: Bytes
  exhibit: Exhibit!
  shares: [BigInt!]
  beneficiaries: [Beneficiary!]
  payments: [PaymentDistributed!] @derivedFrom(field: "escrow")
}

type Beneficiary @entity {
  id: ID! # beneficiary address
  paymentsReceived: [PaymentDistributed!]! @derivedFrom(field: "beneficiary")
  escrow: [Escrow!]! @derivedFrom(field: "beneficiaries")
}

type Museum @entity {
  id: ID! # museum address
  usdtAddress: Bytes!
  owner: Bytes!
  exhibits: [Exhibit!]! @derivedFrom(field: "museum")
}type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExhibitCreated @entity {
  id: Bytes!
  name: String! # string
  symbol: String! # string
  ticketPrice: BigInt! # uint256
  escrow: Bytes! # address
  owner: Bytes! # address
  baseURI: String! # string
  location: String! # string
  meta: String #TODO: optional extradata, implement contract side 
  collection: Collection
  details: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  exhibit: Exhibit!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TicketMinted @entity(immutable: true) {
  id: Bytes!
  exhibit: Exhibit! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  ticket: Ticket!
}
